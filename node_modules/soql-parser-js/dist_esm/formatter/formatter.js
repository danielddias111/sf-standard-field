var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { isNumber, generateParens } from '../utils';
var Formatter = (function () {
    function Formatter(enabled, options) {
        this.currIndent = 1;
        this.enabled = enabled;
        this.options = __assign({ numIndent: 1, fieldMaxLineLength: 60, fieldSubqueryParensOnOwnLine: true, newLineAfterKeywords: false, logging: false }, options);
        if (this.options.newLineAfterKeywords) {
            this.options.fieldSubqueryParensOnOwnLine = true;
        }
    }
    Formatter.prototype.log = function (data) {
        if (this.options.logging) {
            console.log(data);
        }
    };
    Formatter.prototype.getIndent = function (additionalIndent) {
        if (additionalIndent === void 0) { additionalIndent = 0; }
        return this.repeatChar((this.currIndent + additionalIndent) * this.options.numIndent, '\t');
    };
    Formatter.prototype.repeatChar = function (numTimes, char) {
        return new Array(numTimes).fill(char).join('');
    };
    Formatter.prototype.setSubquery = function (isSubquery) {
        this.currIndent = isSubquery ? (this.currIndent += 1) : (this.currIndent -= 1);
    };
    Formatter.prototype.stepCurrIndex = function (num) {
        this.currIndent += num;
    };
    Formatter.prototype.formatFields = function (fieldData) {
        var _this = this;
        function trimPrevSuffix(currIdx) {
            if (fieldData.fields[currIdx - 1]) {
                fieldData.fields[currIdx - 1].suffix = fieldData.fields[currIdx - 1].suffix.trim();
            }
        }
        fieldData.fields.forEach(function (field, i) {
            field.suffix = fieldData.fields.length - 1 === i ? '' : ', ';
        });
        if (this.enabled) {
            var lineLen_1 = 0;
            var newLineAndIndentNext_1 = false;
            fieldData.fields.forEach(function (field, i) {
                if (field.isSubquery) {
                    trimPrevSuffix(i);
                    field.prefix = "\n" + _this.getIndent();
                    field.suffix = fieldData.fields.length - 1 === i ? '' : ', ';
                    lineLen_1 = 0;
                    newLineAndIndentNext_1 = true;
                }
                else if (Array.isArray(field.typeOfClause)) {
                    trimPrevSuffix(i);
                    field.prefix = "\n" + _this.getIndent();
                    newLineAndIndentNext_1 = true;
                }
                else if (isNumber(_this.options.fieldMaxLineLength)) {
                    lineLen_1 += field.text.length + field.suffix.length;
                    if (lineLen_1 > _this.options.fieldMaxLineLength || newLineAndIndentNext_1) {
                        trimPrevSuffix(i);
                        if (!_this.options.newLineAfterKeywords || i > 0) {
                            field.prefix += "\n" + _this.getIndent();
                        }
                        lineLen_1 = 0;
                        newLineAndIndentNext_1 = false;
                    }
                }
                _this.log(field);
            });
        }
    };
    Formatter.prototype.formatTyeOfField = function (text, typeOfClause) {
        var _this = this;
        if (this.enabled && this.options.newLineAfterKeywords) {
            return typeOfClause
                .map(function (part, i) {
                if (i === 0) {
                    return part;
                }
                else if (i === typeOfClause.length - 1) {
                    return "" + _this.getIndent() + part;
                }
                else {
                    return _this.getIndent() + "\t" + part;
                }
            })
                .join('\n');
        }
        return text;
    };
    Formatter.prototype.formatTypeofFieldCondition = function (condition) {
        var output = '';
        var fields = condition.fieldList.join(', ');
        if (this.enabled && this.options.newLineAfterKeywords) {
            var indent = this.getIndent();
            output = "" + condition.type;
            if (condition.objectType) {
                output += "\n" + indent + "\t\t" + condition.objectType + "\n" + indent + "\tTHEN\n" + indent + "\t\t" + fields;
            }
            else {
                output += "\n" + indent + "\t\t" + fields;
            }
        }
        else {
            output = condition.type;
            if (condition.objectType) {
                output += " " + condition.objectType + " THEN " + fields;
            }
            else {
                output += " " + fields;
            }
        }
        return output;
    };
    Formatter.prototype.formatSubquery = function (queryStr, numTabs, incrementTabsWhereClauseOpIndent) {
        if (numTabs === void 0) { numTabs = 2; }
        if (incrementTabsWhereClauseOpIndent === void 0) { incrementTabsWhereClauseOpIndent = false; }
        if (incrementTabsWhereClauseOpIndent) {
            numTabs++;
        }
        var leftParen = '(';
        var rightParen = ')';
        if (this.enabled) {
            if (this.options.fieldSubqueryParensOnOwnLine || this.options.newLineAfterKeywords) {
                queryStr = queryStr.replace(/\n/g, "\n" + this.repeatChar(numTabs, '\t'));
                leftParen = "(\n" + this.repeatChar(numTabs, '\t');
                rightParen = "\n" + this.repeatChar(numTabs - 1, '\t') + ")";
            }
            else {
                queryStr = queryStr.replace(/\n/g, '\n\t');
            }
        }
        return "" + leftParen + queryStr + rightParen;
    };
    Formatter.prototype.formatClause = function (clause) {
        if (this.enabled) {
            return this.options.newLineAfterKeywords ? "\n" + clause + "\n\t" : "\n" + clause;
        }
        return " " + clause;
    };
    Formatter.prototype.formatText = function (text) {
        return this.enabled && (this.options.newLineAfterKeywords || text.startsWith('\n')) ? text : " " + text;
    };
    Formatter.prototype.formatWithIndent = function (text) {
        return this.enabled ? "" + this.getIndent() + text : text;
    };
    Formatter.prototype.formatOrderByArray = function (groupBy) {
        var _this = this;
        if (this.enabled) {
            var currLen_1 = 0;
            var output_1 = '';
            groupBy.forEach(function (token, i) {
                var nextToken = groupBy[i + 1];
                currLen_1 += token.length;
                if (nextToken && (currLen_1 + nextToken.length > _this.options.fieldMaxLineLength || _this.options.newLineAfterKeywords)) {
                    output_1 += token + ",\n\t";
                    currLen_1 = 0;
                }
                else {
                    output_1 += "" + token + (nextToken ? ', ' : '');
                }
            });
            return output_1;
        }
        else {
            return groupBy.join(', ');
        }
    };
    Formatter.prototype.formatParens = function (count, character, leadingParenInline) {
        if (leadingParenInline === void 0) { leadingParenInline = false; }
        var output = '';
        if (isNumber(count) && count > 0) {
            if (this.enabled) {
                if (character === '(') {
                    for (var i = 0; i < count; i++) {
                        if (leadingParenInline && i === count - 1) {
                            output += '(';
                        }
                        else {
                            if (i === 0) {
                                output += '(\n';
                            }
                            else {
                                this.currIndent++;
                                output += this.getIndent() + "(\n";
                            }
                        }
                    }
                    if (!leadingParenInline || count > 1) {
                        this.currIndent++;
                    }
                }
                else {
                    for (var i = count - 1; i >= 0; i--) {
                        if (leadingParenInline && i === count - 1) {
                            output += ')';
                        }
                        else {
                            this.currIndent--;
                            output += "\n" + this.getIndent() + ")";
                        }
                    }
                }
            }
            else {
                output += generateParens(count, character);
            }
        }
        return output;
    };
    Formatter.prototype.formatWhereClauseOperators = function (operator, whereClause, additionalIndent) {
        if (additionalIndent === void 0) { additionalIndent = 0; }
        var skipNewLineAndIndent = operator === 'NOT';
        if (this.enabled && !skipNewLineAndIndent) {
            return "\n" + this.getIndent(additionalIndent) + operator + " " + whereClause;
        }
        else {
            return "" + (skipNewLineAndIndent ? '' : ' ') + operator + " " + whereClause;
        }
    };
    Formatter.prototype.formatAddNewLine = function (alt, skipNewLineAndIndent) {
        if (alt === void 0) { alt = ' '; }
        return this.enabled && !skipNewLineAndIndent ? "\n" : alt;
    };
    return Formatter;
}());
export { Formatter };
//# sourceMappingURL=formatter.js.map
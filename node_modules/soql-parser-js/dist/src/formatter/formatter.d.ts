import { FieldTypeOfCondition } from '../api/api-models';
export interface FieldData {
    fields: {
        text: string;
        typeOfClause?: string[];
        isSubquery: boolean;
        prefix: string;
        suffix: string;
    }[];
    isSubquery: boolean;
    lineBreaks: number[];
}
export interface FormatOptions {
    numIndent?: number;
    fieldMaxLineLength?: number;
    fieldSubqueryParensOnOwnLine?: boolean;
    whereClauseOperatorsIndented?: boolean;
    newLineAfterKeywords?: boolean;
    logging?: boolean;
}
export declare class Formatter {
    enabled: boolean;
    private options;
    private currIndent;
    constructor(enabled: boolean, options: FormatOptions);
    private log;
    private getIndent;
    private repeatChar;
    setSubquery(isSubquery: boolean): void;
    stepCurrIndex(num: number): void;
    formatFields(fieldData: FieldData): void;
    formatTyeOfField(text: string, typeOfClause: string[]): string;
    formatTypeofFieldCondition(condition: FieldTypeOfCondition): string;
    formatSubquery(queryStr: string, numTabs?: number, incrementTabsWhereClauseOpIndent?: boolean): string;
    formatClause(clause: string): string;
    formatText(text: string): string;
    formatWithIndent(text: string): string;
    formatOrderByArray(groupBy: string[]): string;
    formatParens(count: number, character: '(' | ')', leadingParenInline?: boolean): string;
    formatWhereClauseOperators(operator: string, whereClause: string, additionalIndent?: number): string;
    formatAddNewLine(alt?: string, skipNewLineAndIndent?: boolean): string;
}
